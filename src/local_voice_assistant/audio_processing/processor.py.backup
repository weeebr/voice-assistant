import logging
import time
from typing import Dict, List, Optional
from .segmenter import AudioSegmenter
from .transcriber import AudioTranscriber
from ..stt import SpeechToText
from ..notification_manager import NotificationManager
from ..clipboard import ClipboardManager
from ..llm_client import LLMClient
from ..action_executor import ActionExecutor
from ..signal_detector import find_matching_signal
from ..api_client import NERServiceClient

logger = logging.getLogger(__name__)

class AudioProcessor:
    """Main class for processing audio with parallel segment processing."""
    
    def __init__(
        self,
        stt: SpeechToText,
        notification_manager: NotificationManager,
        clipboard_manager: ClipboardManager,
        llm_client: LLMClient,
        ner_service_client: Optional[NERServiceClient] = None,
        transcription_logger = None,
        initial_language: Optional[str] = None,
        max_workers: int = 12,
        silence_threshold: float = 0.01,
        min_segment_length: float = 0.5
    ):
        """
        Initialize the audio processor.
        
        Args:
            stt: SpeechToText instance
            notification_manager: NotificationManager instance
            clipboard_manager: ClipboardManager instance
            llm_client: LLMClient instance
            ner_service_client: Optional NERServiceClient instance
            transcription_logger: Optional logger for transcriptions
            initial_language: Initial STT language
            max_workers: Maximum number of parallel workers
            silence_threshold: Energy threshold for silence detection
            min_segment_length: Minimum segment length in seconds
        """
        self.segmenter = AudioSegmenter(silence_threshold, min_segment_length)
        self.transcriber = AudioTranscriber(stt, max_workers)
        self.notification_manager = notification_manager
        self.clipboard_manager = clipboard_manager
        self.llm_client = llm_client
        self.ner_service_client = ner_service_client
        self.transcription_logger = transcription_logger
        self.default_stt_language = initial_language.split('-')[0] if initial_language else 'en'
        self.max_workers = max_workers
        
        # Load signal configurations
        self.signal_configs = []
        self.commands_by_name = {}
        self._load_signal_configs()
        
        # Initialize action executor
        self.action_executor = ActionExecutor(
            llm_client=self.llm_client,
            ner_service_client=self.ner_service_client,
            clipboard_manager=self.clipboard_manager,
            notification_manager=self.notification_manager
        )
        
    def _load_signal_configs(self):
        """Load signal configurations from config.py."""
        try:
            import config as app_config
            import importlib
            importlib.reload(app_config)
            if hasattr(app_config, 'COMMANDS') and isinstance(app_config.COMMANDS, list):
                self.signal_configs = app_config.COMMANDS
                logger.info(f"‚úÖ Loaded {len(self.signal_configs)} signal configurations from config.py")
                self.commands_by_name = {cfg.get("name"): cfg for cfg in self.signal_configs if cfg.get("name")}
                logger.debug(f"Pre-processed {len(self.commands_by_name)} commands by name.")
            else:
                logger.error("‚ùå config.py has no 'COMMANDS' list. Signals disabled.")
        except ImportError:
            logger.error("‚ùå Failed to import config.py. Signals disabled.")
        except Exception as e:
            logger.exception(f"üí• Failed to load signal config from config.py: {e}")
            
    def process_audio(
        self,
        frames: List[bytes],
        current_processing_mode: str,
        current_stt_hint: Optional[str],
        default_processing_mode: str,
        original_frames: Optional[List[bytes]] = None
    ) -> Dict:
        """
        Process audio as a single chunk for maximum performance.
        """
        logger.info(f"üîÑ Starting audio processing (Mode: {current_processing_mode}, Default: {default_processing_mode})...")

        # Combine all frames into one big segment
        big_segment = b"".join(frames)
        logger.info(f"Processing single chunk of length {len(big_segment)} bytes")
        
        # Transcribe the whole audio at once
        full_text = self.transcriber.transcribe_segment(big_segment, current_stt_hint)
        logger.info(f"Full transcription: '{full_text}'")
        final_full_sanitized_text = full_text.strip()

        if not final_full_sanitized_text:
            logger.info("No text transcribed from audio")
            return {'paste_successful': False, 'mode': current_processing_mode, 'hint': current_stt_hint}

        # Log transcription if logger is available
        if self.transcription_logger:
            self.transcription_logger.info(final_full_sanitized_text)

        # Apply output cleaning for filter phrases
        cleaned_text = self.clipboard_manager.clean_output_text(final_full_sanitized_text)
        if not cleaned_text:
            logger.info("üôÖ‚Äç‚ôÄÔ∏è Detected only filter words or empty after cleaning, skipping.")
            return {'paste_successful': False, 'mode': current_processing_mode, 'hint': current_stt_hint}

        # Check for signal words
        chosen_signal_config, text_for_signal_handler = find_matching_signal(
            cleaned_text,
            self.signal_configs
        )

        text_to_paste = None
        paste_successful = False
        new_processing_mode = current_processing_mode
        new_stt_hint = current_stt_hint

        if chosen_signal_config:
            logger.info(f"üö• Signal detected: '{chosen_signal_config.get('name', 'Unnamed')}'")
            overlay_msg = chosen_signal_config.get('overlay_message', "Processing signal...")
            self.notification_manager.show_message(overlay_msg)
            action_config_list = chosen_signal_config.get('action', [])
            # Use text_for_signal_handler (signal word removed) for all further processing
            text_for_action = text_for_signal_handler if text_for_signal_handler is not None else ''
            context = {
                'text': text_for_action,
                'clipboard': self.clipboard_manager.get_content() or ""
            }
            action_results = self.action_executor.execute_actions(action_config_list, context, chosen_signal_config)
            new_processing_mode = action_results.get('new_mode', new_processing_mode)
            new_stt_hint = action_results.get('new_stt_hint', new_stt_hint)
            
            # Check if action executor already produced results (e.g., shell_command)
            if 'text_to_paste' in action_results and action_results.get('paste_successful'):
                text_to_paste = action_results['text_to_paste']
                paste_successful = action_results['paste_successful']
            elif new_stt_hint and new_stt_hint != current_stt_hint:
                logger.info(f"üîÑ Re-running STT with new hint: '{new_stt_hint}'")
                full_text = self.transcriber.transcribe_segment(big_segment, new_stt_hint)
                final_full_sanitized_text = full_text.strip()
                cleaned_text = self.clipboard_manager.clean_output_text(final_full_sanitized_text)
                # Re-run signal detection and use new text_for_signal_handler
                chosen_signal_config, text_for_signal_handler = find_matching_signal(
                    cleaned_text,
                    self.signal_configs
                )
                text_for_action = text_for_signal_handler if text_for_signal_handler is not None else ''
                        # Only process text_for_action if action executor didn't already produce results
            if text_for_action and not ('text_to_paste' in action_results and action_results.get('paste_successful')):
                if new_processing_mode == 'normal':
                    text_to_paste = text_for_action
                    paste_successful = True
                elif new_processing_mode == 'llm':
                    self.notification_manager.show_message("üß† Sending to LLM...")
                    transformed_text = self.llm_client.transform_text(
                        prompt=text_for_action,
                        notification_manager=self.notification_manager
                    )
                    text_to_paste = transformed_text
                    paste_successful = text_to_paste is not None
                elif new_processing_mode == 'de-CH':
                    self.notification_manager.show_message("üá®üá≠ Translating...")
                    translation_command_config = self.commands_by_name.get('mode:de-CH')
                    if translation_command_config and translation_command_config.get('template'):
                        context = {'text': text_for_action}
                        prompt = translation_command_config['template'].format(**context)
                        model_override = translation_command_config.get('llm_model_override')
                        transformed_text = self.llm_client.transform_text(
                            prompt=prompt,
                            notification_manager=self.notification_manager,
                            model_override=model_override
                        )
                        text_to_paste = transformed_text
                        paste_successful = text_to_paste is not None
                    else:
                        logger.error("Could not find 'mode:de-CH' command config or template for translation.")
                        text_to_paste = f"Error: Config for mode '{new_processing_mode}' missing."
                        paste_successful = False
                else:
                    logger.warning(f"Unknown processing mode '{new_processing_mode}'.")
                    text_to_paste = f"Error: Unknown mode '{new_processing_mode}'"
                    paste_successful = False
            elif not ('text_to_paste' in action_results and action_results.get('paste_successful')):
                logger.info("üôÖ‚Äç‚ôÄÔ∏è No text after signal removal, skipping output.")
                text_to_paste = None
                paste_successful = False
        else:
            if current_processing_mode == 'normal':
                text_to_paste = cleaned_text
                paste_successful = True
            elif current_processing_mode == 'llm':
                self.notification_manager.show_message("üß† Sending to LLM...")
                transformed_text = self.llm_client.transform_text(
                    prompt=cleaned_text,
                    notification_manager=self.notification_manager
                )
                text_to_paste = transformed_text
                paste_successful = text_to_paste is not None
            elif current_processing_mode == 'de-CH':
                self.notification_manager.show_message("üá®üá≠ Translating...")
                translation_command_config = self.commands_by_name.get('mode:de-CH')
                if translation_command_config and translation_command_config.get('template'):
                    context = {'text': cleaned_text}
                    prompt = translation_command_config['template'].format(**context)
                    model_override = translation_command_config.get('llm_model_override')
                    transformed_text = self.llm_client.transform_text(
                        prompt=prompt,
                        notification_manager=self.notification_manager,
                        model_override=model_override
                    )
                    text_to_paste = transformed_text
                    paste_successful = text_to_paste is not None
                else:
                    logger.error("Could not find 'mode:de-CH' command config or template for translation.")
                    text_to_paste = f"Error: Config for mode '{current_processing_mode}' missing."
                    paste_successful = False
            else:
                logger.warning(f"Unknown processing mode '{current_processing_mode}'.")
                text_to_paste = f"Error: Unknown mode '{current_processing_mode}'"
                paste_successful = False

        logger.debug(f"[DEBUG] text_to_paste value before return: '{text_to_paste}'")
        logger.debug(f"[DEBUG] Final Value: paste_successful={paste_successful} before return.")

        return {
            'text_to_paste': text_to_paste,
            'new_processing_mode': new_processing_mode,
            'new_stt_hint': new_stt_hint,
            'paste_successful': paste_successful
        } 
